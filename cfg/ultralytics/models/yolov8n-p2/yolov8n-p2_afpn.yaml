# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLOv8 object detection model with P2-P5 outputs. For Usage examples see https://docs.ultralytics.com/tasks/detect

# Parameters
nc: 80  # number of classes
scales: # model compound scaling constants, i.e. 'model=yolov8n.yaml' will call yolov8.yaml with scale 'n'
  # [depth, width, max_channels]
  n: [0.33, 0.25, 1024]
  s: [0.33, 0.50, 1024]
  m: [0.67, 0.75, 768]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.25, 512]

# YOLOv8.0 backbone
backbone:
  # [from, repeats, module, args]
  - [-1, 1, Conv, [64, 3, 2]]  # 0-P1/2
  - [-1, 1, Conv, [128, 3, 2]]  # 1-P2/4
  - [-1, 3, C2f, [128, True]]
  - [-1, 1, Conv, [256, 3, 2]]  # 3-P3/8
  - [-1, 6, C2f, [256, True]]
  - [-1, 1, Conv, [512, 3, 2]]  # 5-P4/16
  - [-1, 6, C2f, [512, True]]
  - [-1, 1, Conv, [1024, 3, 2]]  # 7-P5/32
  - [-1, 3, C2f, [1024, True]]
  - [-1, 1, SPPF, [1024, 5]]  # 9

# YOLOv8.0-p2 head
head:
  - [2, 1, Conv, [64, 1, 1]] # 10 downsample backbone P2
  - [4, 1, Conv, [128, 1, 1]] # 11 downsample backbone P3

  - [[10, 11], 1, ASFF2, [64, 0]] # 12
  - [[10, 11], 1, ASFF2, [128, 1]] # 13

  - [-2, 1, C2f, [64, False]] # 14
  - [-2, 1, C2f, [128, False]] # 15

  - [6, 1, Conv, [256, 1, 1]] # 16 downsample backbone P4

  - [[14, 15, 16], 1, ASFF3, [64, 0]] # 17
  - [[14, 15, 16], 1, ASFF3, [128, 1]] # 18
  - [[14, 15, 16], 1, ASFF3, [256, 2]] # 19

  - [-3, 1, C2f, [64, False]] # 20
  - [-3, 1, C2f, [128, False]] # 21
  - [-3, 1, C2f, [256, False]] # 22

  - [9, 1, Conv, [512, 1, 1]] # 23 downsample backbone P5

  - [[20, 21, 22, 23], 1, ASFF4, [64, 0]] # 24
  - [[20, 21, 22, 23], 1, ASFF4, [128, 1]] # 25
  - [[20, 21, 22, 23], 1, ASFF4, [256, 2]] # 26
  - [[20, 21, 22, 23], 1, ASFF4, [512, 3]] # 27

  - [24, 1, C2f, [64, False]]  # 28 (P2/4-xsmall)
  - [25, 1, C2f, [128, False]]  # 29 (P3/8-small)
  - [26, 1, C2f, [256, False]]  # 30 (P4/16-medium)
  - [27, 1, C2f, [512, False]]  # 31 (P5/32-large)

  - [[28, 29, 30, 31], 1, Detect, [nc]]  # Detect(P2, P3, P4, P5)
